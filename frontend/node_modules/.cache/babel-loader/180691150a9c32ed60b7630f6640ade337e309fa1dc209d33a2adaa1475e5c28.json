{"ast":null,"code":"var _jsxFileName = \"/Users/raghavvats/devprojects/superpower_project/medical_paper_matcher/frontend/src/components/PaperUpload.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { Box, Button, Typography, LinearProgress, Alert } from '@mui/material';\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:8000';\nconst PaperUpload = () => {\n  _s();\n  const [uploading, setUploading] = useState(false);\n  const [uploadResults, setUploadResults] = useState([]);\n  const fileInputRef = useRef(null);\n  const handleUpload = async event => {\n    const files = event.target.files;\n    if (files.length === 0) return;\n    setUploading(true);\n    setUploadResults([]);\n    const formData = new FormData();\n    Array.from(files).forEach(file => {\n      formData.append('files', file);\n    });\n    try {\n      const response = await axios.post(`${API_BASE_URL}/papers/upload/`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      setUploadResults(response.data);\n    } catch (error) {\n      setUploadResults([{\n        title: 'Upload Error',\n        message: error.message,\n        success: false\n      }]);\n    } finally {\n      setUploading(false);\n      // Reset file input\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".pdf\",\n      multiple: true,\n      onChange: handleUpload,\n      style: {\n        display: 'none'\n      },\n      ref: fileInputRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        p: 3,\n        border: '2px dashed #ccc',\n        borderRadius: 2,\n        bgcolor: '#fafafa',\n        cursor: 'pointer'\n      },\n      onClick: () => {\n        var _fileInputRef$current;\n        return (_fileInputRef$current = fileInputRef.current) === null || _fileInputRef$current === void 0 ? void 0 : _fileInputRef$current.click();\n      },\n      children: [/*#__PURE__*/_jsxDEV(CloudUploadIcon, {\n        sx: {\n          fontSize: 48,\n          color: 'primary.main',\n          mb: 2\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: \"Click to Upload PDFs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        children: \"Select one or more PDF files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), uploading && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(LinearProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        sx: {\n          mt: 1\n        },\n        align: \"center\",\n        children: \"Processing papers...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), uploadResults.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 2\n      },\n      children: uploadResults.map((result, index) => /*#__PURE__*/_jsxDEV(Alert, {\n        severity: result.paper_id ? \"success\" : \"error\",\n        sx: {\n          mb: 1\n        },\n        children: [result.title, \": \", result.message]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(PaperUpload, \"gdWSNmIp0oFVyycAgkQSMmo4J8o=\");\n_c = PaperUpload;\nexport default PaperUpload;\nvar _c;\n$RefreshReg$(_c, \"PaperUpload\");","map":{"version":3,"names":["React","useState","useRef","Box","Button","Typography","LinearProgress","Alert","CloudUploadIcon","axios","jsxDEV","_jsxDEV","API_BASE_URL","PaperUpload","_s","uploading","setUploading","uploadResults","setUploadResults","fileInputRef","handleUpload","event","files","target","length","formData","FormData","Array","from","forEach","file","append","response","post","headers","data","error","title","message","success","current","value","children","type","accept","multiple","onChange","style","display","ref","fileName","_jsxFileName","lineNumber","columnNumber","sx","flexDirection","alignItems","p","border","borderRadius","bgcolor","cursor","onClick","_fileInputRef$current","click","fontSize","color","mb","variant","gutterBottom","mt","align","map","result","index","severity","paper_id","_c","$RefreshReg$"],"sources":["/Users/raghavvats/devprojects/superpower_project/medical_paper_matcher/frontend/src/components/PaperUpload.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport { Box, Button, Typography, LinearProgress, Alert } from '@mui/material';\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload';\nimport axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:8000';\n\nconst PaperUpload = () => {\n  const [uploading, setUploading] = useState(false);\n  const [uploadResults, setUploadResults] = useState([]);\n  const fileInputRef = useRef(null);\n\n  const handleUpload = async (event) => {\n    const files = event.target.files;\n    if (files.length === 0) return;\n\n    setUploading(true);\n    setUploadResults([]);\n\n    const formData = new FormData();\n    Array.from(files).forEach(file => {\n      formData.append('files', file);\n    });\n\n    try {\n      const response = await axios.post(`${API_BASE_URL}/papers/upload/`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n\n      setUploadResults(response.data);\n    } catch (error) {\n      setUploadResults([{\n        title: 'Upload Error',\n        message: error.message,\n        success: false\n      }]);\n    } finally {\n      setUploading(false);\n      // Reset file input\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    }\n  };\n\n  return (\n    <Box>\n      <input\n        type=\"file\"\n        accept=\".pdf\"\n        multiple\n        onChange={handleUpload}\n        style={{ display: 'none' }}\n        ref={fileInputRef}\n      />\n      \n      <Box sx={{ \n        display: 'flex', \n        flexDirection: 'column', \n        alignItems: 'center',\n        p: 3,\n        border: '2px dashed #ccc',\n        borderRadius: 2,\n        bgcolor: '#fafafa',\n        cursor: 'pointer'\n      }} onClick={() => fileInputRef.current?.click()}>\n        <CloudUploadIcon sx={{ fontSize: 48, color: 'primary.main', mb: 2 }} />\n        <Typography variant=\"h6\" gutterBottom>\n          Click to Upload PDFs\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          Select one or more PDF files\n        </Typography>\n      </Box>\n\n      {uploading && (\n        <Box sx={{ mt: 2 }}>\n          <LinearProgress />\n          <Typography sx={{ mt: 1 }} align=\"center\">\n            Processing papers...\n          </Typography>\n        </Box>\n      )}\n\n      {uploadResults.length > 0 && (\n        <Box sx={{ mt: 2 }}>\n          {uploadResults.map((result, index) => (\n            <Alert \n              key={index}\n              severity={result.paper_id ? \"success\" : \"error\"}\n              sx={{ mb: 1 }}\n            >\n              {result.title}: {result.message}\n            </Alert>\n          ))}\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default PaperUpload; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}